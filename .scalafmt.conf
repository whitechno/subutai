//
// Important note:
// When used in IntelliJ, do reformatting with
// Opt + Cmd + L : invokes "org.scalameta" % "sbt-scalafmt" plugin,
// and avoid
// Shift + Cmd + L : invokes IntelliJ built-in plugin which version is behind the scalameta's one,
// so that some settings don't work. Like these:
// trailingCommas = never, newlines.afterCurlyLambda = squash
//

version = "2.4.2"

# Only format files tracked by git.
project.git = true

# manually exclude files to format.
# project.excludeFilters = [".*\\.sbt"]

maxColumn = 100

align = most
align.tokens = [{code = "->"}, {code = "<-"}, {code = "="}, {code = "%%"}, {code = "%"}, {code = ":="}, {code = "=>", owner = "Case"}]

# http://docs.scala-lang.org/style/scaladoc.html recommends the JavaDoc style.
# scala/scala is written that way too https://github.com/scala/scala/blob/v2.12.2/src/library/scala/Predef.scala
docstrings = JavaDoc

# This also seems more idiomatic to include whitespace in import x.{ yyy }
spaces.inImportCurlyBraces = true

assumeStandardLibraryStripMargin = true

# For better code clarity
danglingParentheses = true

//* AvoidInfix:
//    a map (_.toString)
//    to
//    a.map.(_.toString)
//* PreferCurlyFors:
//    Replaces parentheses into curly braces in for comprehensions that contain multiple enumerator generators.
//    for(a <- as; b <- bs if b > 2) yield (a, b)
//    to
//    for { a <- as; b <- bs if b > 2 } yield (a, b)
//* RedundantBraces can cause non-idempotent formatting
//    and it changes q"Hello ${name}" to q"Hello $name"
//* RedundantParens:
//    for { a <- b if (a.nonEmpty) } yield a
//    to
//    for { a <- b if a.nonEmpty } yield a
//* SortImports:
//    The imports are sorted by the groups: symbols, lower-case, upper-case.
//    import foo.{~>, Random, `symbol`, bar}
//    to
//    import foo.{ `symbol`, ~>, bar, Random }
//* SortModifiers:
//    override implicit final sealed abstract private protected lazy
rewrite.rules = [AvoidInfix, PreferCurlyFors, RedundantParens, SortImports, SortModifiers]

// never (default), preserve, always, multiple
// use "never" if cross-compile includes Scala 2.11
//trailingCommas = never

// never (default), always, preserve, squash
// squash : Failed to load scalafmt config: parse error: Unknown input 'squash'
//newlines.afterCurlyLambda = squash
