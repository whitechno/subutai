//
// NOTE:
// In IntelliJ, do reformatting with
// `Opt + Cmd + L` - it invokes "org.scalameta" % "sbt-scalafmt" plugin,
// and avoid
// `Shift + Cmd + L` - it invokes IntelliJ built-in plugin which version is behind the scalameta's one,
// so that some settings don't work. Like these:
// trailingCommas = never, newlines.afterCurlyLambda = squash
//

// see documentation:
// https://scalameta.org/scalafmt/docs/configuration.html

// Disable formatting for specific regions of code by wrapping them in '// format: off' blocks:
// format: off
// format: on


version = 2.5.3

# Only format files tracked by git.
project.git = true

# manually exclude files to format.
# project.excludeFilters = [".*\\.sbt"]

maxColumn = 100

align = most
align.tokens = [{code = "->"}, {code = "<-"}, {code = "="}, {code = "%%"}, {code = "%"}, {code = ":="}, {code = "=>", owner = "Case"}]

# http://docs.scala-lang.org/style/scaladoc.html recommends the JavaDoc style.
# scala/scala is written that way too https://github.com/scala/scala/blob/v2.12.2/src/library/scala/Predef.scala
docstrings = JavaDoc

# This also seems more idiomatic to include whitespace in import x.{ yyy }
spaces.inImportCurlyBraces = true

assumeStandardLibraryStripMargin = true

# For better code clarity
danglingParentheses = true

//
// rewrite.rules with examples:
//

//*** AvoidInfix:
//    'a map (_.toString)' to 'a.map(_.toString)'
//    and
//    '"o" % "a" % "v" c(D)' to '("o" % "a" % "v").c(D)'
//    but leaves unchanged expressions like
//    1 :: 2 :: Nil or scalatest's 'it should "foo" in { ... }'

//*** PreferCurlyFors:
//    Replaces parentheses into curly braces in for comprehensions that contain multiple enumerator generators.
//    for(a <- as; b <- bs if b > 2) yield (a, b)
//    to
//    for { a <- as; b <- bs if b > 2 } yield (a, b)

//*** RedundantBraces can cause non-idempotent formatting
//    and it changes q"Hello ${name}" to q"Hello $name"

//*** RedundantParens:
//    for { a <- b if (a.nonEmpty) } yield a
//    to
//    for { a <- b if a.nonEmpty } yield a

//*** SortImports:
//    The imports are sorted by the groups: symbols, lower-case, upper-case.
//    import foo.{~>, Random, `symbol`, bar}
//    to
//    import foo.{ `symbol`, ~>, bar, Random }

//*** SortModifiers:
//    override implicit final sealed abstract private protected lazy

rewrite.rules = [AvoidInfix, PreferCurlyFors, RedundantParens, SortImports, SortModifiers]

// below are settings that for some reason don't work:

// never (default), preserve, always, multiple
// use "never" if cross-compile includes Scala 2.11
//trailingCommas = never

// never (default), always, preserve, squash
// squash : Failed to load scalafmt config: parse error: Unknown input 'squash'
//newlines.afterCurlyLambda = squash
